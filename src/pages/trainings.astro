---
import Layout from '../layouts/Layout.astro';

// Auth-Check
const sessionCookie = Astro.cookies.get('session');
if (!sessionCookie) {
  return Astro.redirect('/login');
}

const { db } = await import('../lib/db');
const user = await db.users.getById(sessionCookie.value);

if (!user) {
  return Astro.redirect('/login');
}

// Trainings und Anmeldungen laden
const trainings = await db.trainings.getUpcoming();
const userAttendances = await db.attendances.getByUser(user.id);

// Alle Anmeldungen für Trainings laden
const attendancesMap: Record<string, any[]> = {};
for (const training of trainings) {
  const attendances = await db.attendances.getByTraining(training.id);
  attendancesMap[training.id] = attendances;
}

let message = '';
let messageType: 'success' | 'error' = 'success';

if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const action = formData.get('action')?.toString();
    const trainingId = formData.get('trainingId')?.toString();

    if (!trainingId) {
      message = 'Ungültige Anfrage';
      messageType = 'error';
    } else if (action === 'register') {
      const training = await db.trainings.getById(trainingId);
      if (!training) {
        message = 'Training nicht gefunden';
        messageType = 'error';
      } else {
        const currentAttendances = await db.attendances.getByTraining(trainingId);
        if (currentAttendances.length >= training.maxParticipants) {
          message = 'Training ist bereits ausgebucht';
          messageType = 'error';
        } else {
          await db.attendances.create({
            trainingId,
            userId: user.id,
            userName: user.name,
            status: 'attending',
            timestamp: new Date().toISOString()
          });
          return Astro.redirect('/trainings?success=registered');
        }
      }
    } else if (action === 'cancel') {
      await db.attendances.cancel(trainingId, user.id);
      return Astro.redirect('/trainings?success=cancelled');
    }
  } catch (e) {
    message = 'Ein Fehler ist aufgetreten';
    messageType = 'error';
  }
}

// URL-Parameter für Success-Messages
const url = new URL(Astro.request.url);
const successParam = url.searchParams.get('success');
if (successParam === 'registered') {
  message = 'Du hast dich erfolgreich angemeldet!';
  messageType = 'success';
} else if (successParam === 'cancelled') {
  message = 'Du hast dich erfolgreich abgemeldet';
  messageType = 'success';
}
---

<Layout title="Trainings">
  <div>
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Trainings</h1>
      <p class="text-gray-600 mt-2">Melde dich für Trainings an, {user.name}!</p>
    </div>

    {message && (
      <div class={`mb-4 p-4 rounded-md ${messageType === 'success' ? 'bg-green-50 border border-green-200' : 'bg-red-50 border border-red-200'}`}>
        <p class={messageType === 'success' ? 'text-green-800' : 'text-red-800'}>{message}</p>
      </div>
    )}

    <div class="bg-white rounded-lg shadow-md border border-gray-200">
      <div class="p-6 border-b border-gray-200">
        <h2 class="text-xl font-semibold">Anstehende Trainings</h2>
      </div>

      {trainings.length === 0 ? (
        <div class="p-6 text-center text-gray-500">
          Derzeit sind keine Trainings geplant. Schau später wieder vorbei!
        </div>
      ) : (
        <div class="divide-y divide-gray-200">
          {trainings.map((training) => {
            const registered = userAttendances.some(
              (a) => a.trainingId === training.id && a.status === 'attending'
            );
            const attendanceCount = attendancesMap[training.id]?.length || 0;
            const isFull = attendanceCount >= training.maxParticipants;

            return (
              <div class="p-6">
                <div class="flex justify-between items-start">
                  <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-900">
                      {new Date(training.date).toLocaleDateString('de-DE', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                      })}
                    </h3>
                    <p class="text-gray-600 mt-1">Uhrzeit: {training.time} Uhr</p>
                    <p class="text-sm text-gray-500 mt-1">
                      Trainer: {training.trainerName}
                    </p>
                    <div class="mt-2 flex items-center space-x-4">
                      <span class="text-sm text-gray-600">
                        Anmeldungen: {attendanceCount} / {training.maxParticipants}
                      </span>
                      {isFull && !registered && (
                        <span class="text-xs px-2 py-1 bg-red-100 text-red-800 rounded-full">
                          Ausgebucht
                        </span>
                      )}
                      {registered && (
                        <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">
                          ✓ Angemeldet
                        </span>
                      )}
                    </div>
                  </div>

                  <div class="ml-4">
                    {registered ? (
                      <form method="POST">
                        <input type="hidden" name="action" value="cancel" />
                        <input type="hidden" name="trainingId" value={training.id} />
                        <button
                          type="submit"
                          class="px-4 py-2 text-sm text-red-600 hover:text-red-700 border border-red-600 rounded-md hover:bg-red-50"
                        >
                          Abmelden
                        </button>
                      </form>
                    ) : !isFull ? (
                      <form method="POST">
                        <input type="hidden" name="action" value="register" />
                        <input type="hidden" name="trainingId" value={training.id} />
                        <button
                          type="submit"
                          class="px-4 py-2 text-sm text-white bg-blue-600 rounded-md hover:bg-blue-700"
                        >
                          Anmelden
                        </button>
                      </form>
                    ) : (
                      <button
                        disabled
                        class="px-4 py-2 text-sm text-gray-400 bg-gray-100 rounded-md cursor-not-allowed"
                      >
                        Ausgebucht
                      </button>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>

    {userAttendances.filter((a) => a.status === 'attending').length > 0 && (
      <div class="mt-8 bg-white rounded-lg shadow-md border border-gray-200">
        <div class="p-6 border-b border-gray-200">
          <h2 class="text-xl font-semibold">Meine Anmeldungen</h2>
        </div>
        <div class="p-6">
          <ul class="space-y-2">
            {userAttendances
              .filter((a) => a.status === 'attending')
              .map((attendance) => {
                const training = trainings.find((t) => t.id === attendance.trainingId);
                if (!training) return null;

                return (
                  <li class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
                    <div>
                      <span class="font-medium">
                        {new Date(training.date).toLocaleDateString('de-DE')}
                      </span>
                      <span class="text-gray-600 ml-2">{training.time} Uhr</span>
                    </div>
                    <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">
                      Angemeldet
                    </span>
                  </li>
                );
              })}
          </ul>
        </div>
      </div>
    )}
  </div>
</Layout>
