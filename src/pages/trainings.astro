---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Trainings">
  <div id="loading" class="text-center py-8">
    <p class="text-gray-600">Laden...</p>
  </div>

  <div id="content" class="hidden">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Trainings</h1>
      <p class="text-gray-600 mt-2">Melde dich für Trainings an, <span id="user-name"></span>!</p>
    </div>

    <div id="message-container"></div>

    <div class="bg-white rounded-lg shadow-md border border-gray-200">
      <div class="p-6 border-b border-gray-200">
        <h2 class="text-xl font-semibold">Anstehende Trainings</h2>
      </div>

      <div id="trainings-list"></div>
    </div>

    <div id="my-attendances" class="mt-8 bg-white rounded-lg shadow-md border border-gray-200 hidden">
      <div class="p-6 border-b border-gray-200">
        <h2 class="text-xl font-semibold">Meine Anmeldungen</h2>
      </div>
      <div class="p-6">
        <ul id="attendances-list" class="space-y-2"></ul>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../lib/supabase';
  import { getUser, getUserRole } from '../lib/auth';

  let currentUser: any = null;
  let currentUserData: any = null;

  async function init() {
    // Auth check
    currentUser = await getUser();
    if (!currentUser) {
      window.location.href = '/login';
      return;
    }

    currentUserData = await getUserRole(currentUser.id);

    // Show content
    document.getElementById('loading')!.classList.add('hidden');
    document.getElementById('content')!.classList.remove('hidden');
    document.getElementById('user-name')!.textContent = currentUserData.name;

    // Check for success messages
    const params = new URLSearchParams(window.location.search);
    const success = params.get('success');
    if (success === 'registered') {
      showMessage('Du hast dich erfolgreich angemeldet!', 'success');
    } else if (success === 'cancelled') {
      showMessage('Du hast dich erfolgreich abgemeldet', 'success');
    }

    await loadTrainings();
  }

  function showMessage(text: string, type: 'success' | 'error') {
    const container = document.getElementById('message-container')!;
    const bgClass = type === 'success' ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200';
    const textClass = type === 'success' ? 'text-green-800' : 'text-red-800';

    container.innerHTML = `
      <div class="mb-4 p-4 rounded-md ${bgClass} border">
        <p class="${textClass}">${text}</p>
      </div>
    `;
  }

  async function loadTrainings() {
    try {
      // Load trainings
      const { data: trainings, error: trainingsError } = await supabase
        .from('trainings')
        .select('*')
        .gte('date', new Date().toISOString().split('T')[0])
        .order('date', { ascending: true })
        .order('time', { ascending: true });

      if (trainingsError) throw trainingsError;

      // Load user attendances
      const { data: userAttendances, error: attendancesError } = await supabase
        .from('attendances')
        .select('*')
        .eq('user_id', currentUser.id)
        .eq('status', 'attending');

      if (attendancesError) throw attendancesError;

      // Load all attendances for each training
      const attendancesByTraining: Record<string, any[]> = {};
      for (const training of trainings || []) {
        const { data, error } = await supabase
          .from('attendances')
          .select('*')
          .eq('training_id', training.id)
          .eq('status', 'attending');

        if (!error) {
          attendancesByTraining[training.id] = data || [];
        }
      }

      renderTrainings(trainings || [], userAttendances || [], attendancesByTraining);
      renderMyAttendances(userAttendances || [], trainings || []);
    } catch (err: any) {
      showMessage('Fehler beim Laden der Trainings: ' + err.message, 'error');
    }
  }

  function renderTrainings(
    trainings: any[],
    userAttendances: any[],
    attendancesByTraining: Record<string, any[]>
  ) {
    const container = document.getElementById('trainings-list')!;

    if (trainings.length === 0) {
      container.innerHTML = `
        <div class="p-6 text-center text-gray-500">
          Derzeit sind keine Trainings geplant. Schau später wieder vorbei!
        </div>
      `;
      return;
    }

    container.innerHTML = `
      <div class="divide-y divide-gray-200">
        ${trainings.map((training) => {
          const registered = userAttendances.some(a => a.training_id === training.id);
          const attendanceCount = attendancesByTraining[training.id]?.length || 0;
          const isFull = attendanceCount >= training.max_participants;

          const date = new Date(training.date);
          const formattedDate = date.toLocaleDateString('de-DE', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          });

          return `
            <div class="p-6">
              <div class="flex justify-between items-start">
                <div class="flex-1">
                  <h3 class="text-lg font-semibold text-gray-900">${formattedDate}</h3>
                  <p class="text-gray-600 mt-1">Uhrzeit: ${training.time} Uhr</p>
                  <p class="text-sm text-gray-500 mt-1">Trainer: ${training.trainer_name}</p>
                  <div class="mt-2 flex items-center space-x-4">
                    <span class="text-sm text-gray-600">
                      Anmeldungen: ${attendanceCount} / ${training.max_participants}
                    </span>
                    ${isFull && !registered ? `
                      <span class="text-xs px-2 py-1 bg-red-100 text-red-800 rounded-full">
                        Ausgebucht
                      </span>
                    ` : ''}
                    ${registered ? `
                      <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">
                        ✓ Angemeldet
                      </span>
                    ` : ''}
                  </div>
                </div>
                <div class="ml-4">
                  ${registered ? `
                    <button
                      onclick="cancelAttendance('${training.id}')"
                      class="px-4 py-2 text-sm text-red-600 hover:text-red-700 border border-red-600 rounded-md hover:bg-red-50"
                    >
                      Abmelden
                    </button>
                  ` : !isFull ? `
                    <button
                      onclick="registerForTraining('${training.id}')"
                      class="px-4 py-2 text-sm text-white bg-blue-600 rounded-md hover:bg-blue-700"
                    >
                      Anmelden
                    </button>
                  ` : `
                    <button
                      disabled
                      class="px-4 py-2 text-sm text-gray-400 bg-gray-100 rounded-md cursor-not-allowed"
                    >
                      Ausgebucht
                    </button>
                  `}
                </div>
              </div>
            </div>
          `;
        }).join('')}
      </div>
    `;
  }

  function renderMyAttendances(userAttendances: any[], trainings: any[]) {
    const container = document.getElementById('my-attendances')!;
    const list = document.getElementById('attendances-list')!;

    if (userAttendances.length === 0) {
      container.classList.add('hidden');
      return;
    }

    container.classList.remove('hidden');
    list.innerHTML = userAttendances.map((attendance) => {
      const training = trainings.find(t => t.id === attendance.training_id);
      if (!training) return '';

      const date = new Date(training.date);
      const formattedDate = date.toLocaleDateString('de-DE');

      return `
        <li class="flex items-center justify-between p-3 bg-gray-50 rounded-md">
          <div>
            <span class="font-medium">${formattedDate}</span>
            <span class="text-gray-600 ml-2">${training.time} Uhr</span>
          </div>
          <span class="text-xs px-2 py-1 bg-green-100 text-green-800 rounded-full">
            Angemeldet
          </span>
        </li>
      `;
    }).join('');
  }

  (window as any).registerForTraining = async function(trainingId: string) {
    try {
      // Check if training is full
      const { data: training, error: trainingError } = await supabase
        .from('trainings')
        .select('*')
        .eq('id', trainingId)
        .single();

      if (trainingError) throw trainingError;

      const { data: attendances, error: attendancesError } = await supabase
        .from('attendances')
        .select('*')
        .eq('training_id', trainingId)
        .eq('status', 'attending');

      if (attendancesError) throw attendancesError;

      if (attendances.length >= training.max_participants) {
        showMessage('Training ist bereits ausgebucht', 'error');
        return;
      }

      // Register
      const { error } = await supabase.from('attendances').insert({
        training_id: trainingId,
        user_id: currentUser.id,
        user_name: currentUserData.name,
        status: 'attending',
      });

      if (error) throw error;

      window.location.href = '/trainings?success=registered';
    } catch (err: any) {
      showMessage('Fehler bei der Anmeldung: ' + err.message, 'error');
    }
  };

  (window as any).cancelAttendance = async function(trainingId: string) {
    try {
      const { error } = await supabase
        .from('attendances')
        .update({ status: 'cancelled' })
        .eq('training_id', trainingId)
        .eq('user_id', currentUser.id);

      if (error) throw error;

      window.location.href = '/trainings?success=cancelled';
    } catch (err: any) {
      showMessage('Fehler beim Abmelden: ' + err.message, 'error');
    }
  };

  init();
</script>
