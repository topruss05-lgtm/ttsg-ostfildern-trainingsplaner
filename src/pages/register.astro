---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Registrieren">
  <div class="max-w-md mx-auto">
    <div class="bg-white p-8 rounded-lg shadow-md border border-gray-200">
      <h2 class="text-2xl font-bold text-gray-900 mb-6">Registrieren</h2>

      <div id="error-message" class="hidden mb-4 p-4 bg-red-50 border border-red-200 rounded-md">
        <p class="text-red-800"></p>
      </div>

      <form id="register-form" class="space-y-4">
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">
            Name
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label for="email" class="block text-sm font-medium text-gray-700 mb-1">
            E-Mail
          </label>
          <input
            type="email"
            id="email"
            name="email"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-1">
            Passwort
          </label>
          <input
            type="password"
            id="password"
            name="password"
            required
            minlength="6"
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <div>
          <label for="role" class="block text-sm font-medium text-gray-700 mb-1">
            Rolle
          </label>
          <select
            id="role"
            name="role"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">Bitte wählen...</option>
            <option value="player">Spieler</option>
            <option value="trainer">Trainer</option>
          </select>
        </div>

        <button
          type="submit"
          class="w-full px-4 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        >
          Registrieren
        </button>
      </form>

      <p class="mt-4 text-sm text-gray-600 text-center">
        Bereits registriert?
        <a href="/login" class="text-blue-600 hover:text-blue-700 font-medium">
          Jetzt anmelden
        </a>
      </p>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../lib/supabase';

  const form = document.getElementById('register-form') as HTMLFormElement;
  const errorDiv = document.getElementById('error-message') as HTMLDivElement;

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    const name = formData.get('name') as string;
    const role = formData.get('role') as string;

    try {
      console.log('Registrierung gestartet für:', email);

      // 1. Registriere User in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email,
        password,
        options: {
          data: {
            name,
            role,
          },
          emailRedirectTo: window.location.origin,
        },
      });

      console.log('Supabase Auth Response:', { authData, authError });

      if (authError) {
        console.error('Auth Error:', authError);
        throw authError;
      }

      if (!authData.user) {
        throw new Error('Keine User-Daten von Supabase erhalten');
      }

      console.log('User erstellt in Auth:', authData.user.id);

      // 2. Prüfe ob User bereits in users-Tabelle existiert
      const { data: existingUser } = await supabase
        .from('users')
        .select('id')
        .eq('id', authData.user.id)
        .single();

      if (!existingUser) {
        // User existiert noch nicht - erstelle Eintrag
        const { error: dbError } = await supabase.from('users').insert({
          id: authData.user.id,
          email,
          name,
          role,
        });

        if (dbError) {
          console.error('DB Error:', dbError);
          throw dbError;
        }

        console.log('User erfolgreich in DB erstellt');
      } else {
        console.log('User existiert bereits in DB');
      }

      // 3. Check ob Email-Bestätigung erforderlich ist
      if (authData.session) {
        // Direkt eingeloggt - Email-Bestätigung nicht erforderlich
        window.location.href = role === 'trainer' ? '/trainer/dashboard' : '/trainings';
      } else {
        // Email-Bestätigung erforderlich
        errorDiv.classList.remove('hidden');
        errorDiv.querySelector('p')!.textContent =
          'Registrierung erfolgreich! Bitte bestätige deine E-Mail-Adresse. Prüfe deinen Posteingang.';
        errorDiv.classList.remove('bg-red-50', 'border-red-200');
        errorDiv.classList.add('bg-green-50', 'border-green-200');
        errorDiv.querySelector('p')!.classList.remove('text-red-800');
        errorDiv.querySelector('p')!.classList.add('text-green-800');
      }
    } catch (err: any) {
      console.error('Registrierungsfehler:', err);
      errorDiv.classList.remove('hidden');
      errorDiv.classList.remove('bg-green-50', 'border-green-200');
      errorDiv.classList.add('bg-red-50', 'border-red-200');
      errorDiv.querySelector('p')!.classList.remove('text-green-800');
      errorDiv.querySelector('p')!.classList.add('text-red-800');

      let errorMessage = 'Ein Fehler ist aufgetreten';

      if (err.message?.includes('already registered') || err.message?.includes('User already registered')) {
        errorMessage = 'Diese E-Mail wird bereits verwendet';
      } else if (err.message) {
        errorMessage = err.message;
      }

      errorDiv.querySelector('p')!.textContent = errorMessage;
    }
  });
</script>
