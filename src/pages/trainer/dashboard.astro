---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Trainer-Dashboard">
  <div id="loading" class="text-center py-8">
    <p class="text-gray-600">Laden...</p>
  </div>

  <div id="content" class="hidden">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900">Trainer-Dashboard</h1>
      <p class="text-gray-600 mt-2">Willkommen, <span id="user-name"></span>!</p>
    </div>

    <div id="message-container"></div>

    <div class="mb-6">
      <button
        id="toggleFormBtn"
        class="px-4 py-2 text-white bg-blue-600 rounded-md hover:bg-blue-700"
      >
        + Neues Training erstellen
      </button>
    </div>

    <div id="createForm" class="bg-white p-6 rounded-lg shadow-md border border-gray-200 mb-8 hidden">
      <h2 class="text-xl font-semibold mb-4">Neues Training erstellen</h2>
      <form id="create-training-form" class="space-y-4">
        <div class="grid md:grid-cols-2 gap-4">
          <div>
            <label for="date" class="block text-sm font-medium text-gray-700 mb-1">
              Datum
            </label>
            <input
              type="date"
              id="date"
              name="date"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label for="time" class="block text-sm font-medium text-gray-700 mb-1">
              Uhrzeit
            </label>
            <input
              type="time"
              id="time"
              name="time"
              required
              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>
        </div>

        <div>
          <label for="maxParticipants" class="block text-sm font-medium text-gray-700 mb-1">
            Maximale Teilnehmerzahl
          </label>
          <input
            type="number"
            id="maxParticipants"
            name="maxParticipants"
            min="1"
            value="20"
            required
            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        <button
          type="submit"
          class="px-4 py-2 text-white bg-green-600 rounded-md hover:bg-green-700"
        >
          Training erstellen
        </button>
      </form>
    </div>

    <div class="bg-white rounded-lg shadow-md border border-gray-200">
      <div class="p-6 border-b border-gray-200">
        <h2 class="text-xl font-semibold">Anstehende Trainings</h2>
      </div>

      <div id="trainings-list"></div>
    </div>
  </div>
</Layout>

<script>
  import { supabase } from '../../lib/supabase';
  import { getUser, getUserRole } from '../../lib/auth';

  let currentUser: any = null;
  let currentUserData: any = null;

  async function init() {
    // Auth check
    currentUser = await getUser();
    if (!currentUser) {
      window.location.href = '/login';
      return;
    }

    currentUserData = await getUserRole(currentUser.id);

    if (currentUserData.role !== 'trainer') {
      window.location.href = '/';
      return;
    }

    // Show content
    document.getElementById('loading')!.classList.add('hidden');
    document.getElementById('content')!.classList.remove('hidden');
    document.getElementById('user-name')!.textContent = currentUserData.name;

    // Check for success messages
    const params = new URLSearchParams(window.location.search);
    const success = params.get('success');
    if (success === 'created') {
      showMessage('Training erfolgreich erstellt!', 'success');
    } else if (success === 'deleted') {
      showMessage('Training erfolgreich gelöscht', 'success');
    }

    // Setup form handlers
    setupFormHandlers();

    await loadTrainings();
  }

  function showMessage(text: string, type: 'success' | 'error') {
    const container = document.getElementById('message-container')!;
    const bgClass = type === 'success' ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200';
    const textClass = type === 'success' ? 'text-green-800' : 'text-red-800';

    container.innerHTML = `
      <div class="mb-4 p-4 rounded-md ${bgClass} border">
        <p class="${textClass}">${text}</p>
      </div>
    `;
  }

  function setupFormHandlers() {
    const toggleBtn = document.getElementById('toggleFormBtn')!;
    const form = document.getElementById('createForm')!;
    const createForm = document.getElementById('create-training-form') as HTMLFormElement;

    toggleBtn.addEventListener('click', () => {
      form.classList.toggle('hidden');
      if (toggleBtn.textContent?.includes('Abbrechen')) {
        toggleBtn.textContent = '+ Neues Training erstellen';
      } else {
        toggleBtn.textContent = 'Abbrechen';
      }
    });

    createForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(createForm);
      const date = formData.get('date') as string;
      const time = formData.get('time') as string;
      const maxParticipants = parseInt(formData.get('maxParticipants') as string);

      if (!date || !time || !maxParticipants || maxParticipants < 1) {
        showMessage('Bitte fülle alle Felder korrekt aus', 'error');
        return;
      }

      try {
        const { error } = await supabase.from('trainings').insert({
          date,
          time,
          max_participants: maxParticipants,
          trainer_id: currentUser.id,
          trainer_name: currentUserData.name,
        });

        if (error) throw error;

        window.location.href = '/trainer/dashboard?success=created';
      } catch (err: any) {
        showMessage('Fehler beim Erstellen: ' + err.message, 'error');
      }
    });
  }

  async function loadTrainings() {
    try {
      // Load trainings
      const { data: trainings, error: trainingsError } = await supabase
        .from('trainings')
        .select('*')
        .gte('date', new Date().toISOString().split('T')[0])
        .order('date', { ascending: true })
        .order('time', { ascending: true });

      if (trainingsError) throw trainingsError;

      // Load attendances for each training
      const attendancesByTraining: Record<string, any[]> = {};
      for (const training of trainings || []) {
        const { data, error } = await supabase
          .from('attendances')
          .select('*')
          .eq('training_id', training.id)
          .eq('status', 'attending');

        if (!error) {
          attendancesByTraining[training.id] = data || [];
        }
      }

      renderTrainings(trainings || [], attendancesByTraining);
    } catch (err: any) {
      showMessage('Fehler beim Laden der Trainings: ' + err.message, 'error');
    }
  }

  function renderTrainings(trainings: any[], attendancesByTraining: Record<string, any[]>) {
    const container = document.getElementById('trainings-list')!;

    if (trainings.length === 0) {
      container.innerHTML = `
        <div class="p-6 text-center text-gray-500">
          Noch keine Trainings geplant. Erstelle dein erstes Training!
        </div>
      `;
      return;
    }

    container.innerHTML = `
      <div class="divide-y divide-gray-200">
        ${trainings.map((training) => {
          const attendances = attendancesByTraining[training.id] || [];
          const date = new Date(training.date);
          const formattedDate = date.toLocaleDateString('de-DE', {
            weekday: 'long',
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          });

          return `
            <div class="p-6">
              <div class="flex justify-between items-start mb-4">
                <div>
                  <h3 class="text-lg font-semibold text-gray-900">${formattedDate}</h3>
                  <p class="text-gray-600">Uhrzeit: ${training.time} Uhr</p>
                  <p class="text-sm text-gray-500 mt-1">
                    Max. Teilnehmer: ${training.max_participants}
                  </p>
                </div>
                <button
                  onclick="deleteTraining('${training.id}')"
                  class="px-3 py-1 text-sm text-red-600 hover:text-red-700 border border-red-600 rounded-md hover:bg-red-50"
                >
                  Löschen
                </button>
              </div>

              <div class="mt-4">
                <h4 class="font-medium text-gray-900 mb-2">
                  Angemeldete Spieler (${attendances.length})
                </h4>
                ${attendances.length > 0 ? `
                  <ul class="space-y-1">
                    ${attendances.map(attendance => `
                      <li class="flex items-center text-sm text-gray-700">
                        <span class="w-2 h-2 bg-green-500 rounded-full mr-2"></span>
                        ${attendance.user_name}
                      </li>
                    `).join('')}
                  </ul>
                ` : `
                  <p class="text-sm text-gray-500">Noch keine Anmeldungen</p>
                `}
              </div>
            </div>
          `;
        }).join('')}
      </div>
    `;
  }

  (window as any).deleteTraining = async function(trainingId: string) {
    if (!confirm('Möchtest du dieses Training wirklich löschen?')) {
      return;
    }

    try {
      const { error } = await supabase
        .from('trainings')
        .delete()
        .eq('id', trainingId);

      if (error) throw error;

      window.location.href = '/trainer/dashboard?success=deleted';
    } catch (err: any) {
      showMessage('Fehler beim Löschen: ' + err.message, 'error');
    }
  };

  init();
</script>
